definitions:
  models.CreateUser:
    properties:
      password_hash:
        type: string
      user_name:
        type: string
    type: object
  models.DefaultError:
    properties:
      message:
        type: string
    type: object
  models.GetListUserResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Login:
    properties:
      password:
        type: string
      user_name:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user_data:
        $ref: '#/definitions/models.User'
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.UpdateUser:
    properties:
      id:
        type: string
      password_hash:
        type: string
      user_name:
        type: string
    required:
    - id
    type: object
  models.User:
    properties:
      id:
        type: string
      password_hash:
        type: string
      user_name:
        type: string
    type: object
info:
  contact: {}
  description: This is an authentication API
  title: Auth API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input or user not found
          schema:
            $ref: '#/definitions/models.DefaultError'
        "401":
          description: Unauthorized, invalid credentials
          schema:
            $ref: '#/definitions/models.DefaultError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Login user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create new user with username and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/models.DefaultError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.DefaultError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Register new user
      tags:
      - auth
  /users:
    get:
      description: Get paginated list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetListUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with given data
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
